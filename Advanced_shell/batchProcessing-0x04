#!/bin/bash

# Output files
output_dir="pokemon_data"
error_log="errors.txt"

# Pokémon list
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Create output directory and clear error log
mkdir -p "$output_dir"
> "$error_log"

# Fetch function
fetch_pokemon() {
    local name="$1"
    local url="https://pokeapi.co/api/v2/pokemon/$name"
    local file="${output_dir}/${name}.json"

    echo "Fetching data for $name..."

    response=$(curl -s -w "%{http_code}" -o "$file" "$url")

    if [ "$response" -eq 200 ]; then
        echo "Saved data to $file ✅"
    else
        echo "❌ Failed to fetch $name (HTTP $response)" | tee -a "$error_log"
        rm -f "$file"
    fi
}

# Parallel fetching
for name in "${pokemon_list[@]}"; do
    fetch_pokemon "$name" &
done

# Background job: Dummy process (to demonstrate kill usage)
echo -e "\nStarting dummy sleep process (30s)..."
sleep 30 &
sleep_pid=$!
echo "Dummy process started with PID: $sleep_pid"

# Wait a few seconds and then kill it
sleep 3
kill "$sleep_pid" && echo "Process $sleep_pid killed using 'kill' ✅" || echo "Failed to kill process $sleep_pid ❌"

# Wait for all background fetch jobs to finish
wait

echo -e "\n✅ All Pokémon fetch operations and process management complete."
